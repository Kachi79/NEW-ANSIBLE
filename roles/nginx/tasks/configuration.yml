---

- name: Check if nginx mime.types file exists
  become: yes
  stat:
    path: "{{ nginx_conf_dir }}/mime.types"
  register: nginx_mime_types_file
  notify:
    - reload nginx

- name: Ensure mime.types file exists if it was missing
  become: yes
  get_url:
    url: https://raw.githubusercontent.com/nginx/nginx/master/conf/mime.types
    dest: "{{ nginx_conf_dir }}/mime.types"
  when: not nginx_mime_types_file.stat.exists|bool
  notify:
    - reload nginx

- name: Copy the nginx configuration file
  become: yes
  template:
    src: nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/nginx.conf"
  notify:
    - restart nginx

- name: Ensure auth_basic files created
  become: yes
  template:
    src: auth_basic.j2
    dest: "{{ nginx_conf_dir }}/auth_basic/{{ item.key }}"
    mode: 0750
    group: "{{ nginx_group }}"
  with_dict: "{{ nginx_auth_basic_files }}"

- name: Create the configurations for common sites
  become: yes
  template:
    src: "{{ item.value.template | default(nginx_default_site_template) }}"
    dest: "{{ nginx_conf_dir }}/sites-available/{{ item.key }}.conf"
  with_dict: "{{ nginx_common_sites }}"
  when: item.key not in nginx_remove_sites
  notify:
    - reload nginx

- name: Create links for common sites-enabled
  become: yes
  file:
    state: link
    src: "{{ nginx_conf_dir }}/sites-available/{{ item.key }}.conf"
    dest: "{{ nginx_conf_dir }}/sites-enabled/{{ item.key }}.conf"
  with_dict: "{{ nginx_common_sites }}"
  when:
    - item.key not in nginx_remove_sites
    - item.key not in nginx_disabled_sites
    - ansible_connection != 'local'
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx

- name: Create links for common sites-enabled locally
  become: yes
  file:
    state: link
    src: "../sites-available/{{ item.key }}.conf"
    dest: "{{ nginx_conf_dir }}/sites-enabled/{{ item.key }}.conf"
  with_dict: "{{ nginx_common_sites }}"
  when:
    - item.key not in nginx_remove_sites
    - item.key not in nginx_disabled_sites
    - ansible_connection == 'local'
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx

- name: Create the configurations for sites
  become: yes
  template:
    src: "{{ item.value.template | default(nginx_default_site_template) }}"
    dest: "{{ nginx_conf_dir }}/sites-available/{{ item.key }}.conf"
  with_dict: "{{ nginx_sites }}"
  when: item.key not in nginx_remove_sites
  notify:
    - reload nginx

- name: Create links for sites-enabled
  become: yes
  file:
    state: link
    src: "{{ nginx_conf_dir }}/sites-available/{{ item.key }}.conf"
    dest: "{{ nginx_conf_dir }}/sites-enabled/{{ item.key }}.conf"
  with_dict: "{{ nginx_sites }}"
  when:
    - item.key not in nginx_remove_sites
    - item.key not in nginx_disabled_sites
    - ansible_connection != 'local'
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx

- name: Create links for sites-enabled locally
  become: yes
  file:
    state: link
    src: "../sites-available/{{ item.key }}.conf"
    dest: "{{ nginx_conf_dir }}/sites-enabled/{{ item.key }}.conf"
  with_dict: "{{ nginx_sites }}"
  when:
    - item.key not in nginx_remove_sites
    - item.key not in nginx_disabled_sites
    - ansible_connection == 'local'
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx

- name: Create the configurations for independent config file
  become: yes
  template:
    src: "{{ item.value.template | default('config.conf.j2') }}"
    dest: "{{ nginx_conf_dir }}/conf.d/{{ item.key }}.conf"
  with_dict: "{{ nginx_configs }}"
  notify:
    - reload nginx

- name: Create configuration snippets
  become: yes
  template:
    src: config.conf.j2
    dest: "{{ nginx_conf_dir }}/snippets/{{ item.key }}.conf"
  with_dict: "{{ nginx_snippets }}"
  notify:
    - reload nginx

- name: Create the configurations for independent config file for streams
  become: yes
  template:
    src: "{{ item.value.template | default('config_stream.conf.j2') }}"
    dest: "{{ nginx_conf_dir }}/conf.d/stream/{{ item.key }}.conf"
  with_dict: "{{ nginx_stream_configs }}"
  notify:
    - reload nginx
  when: nginx_stream_params or nginx_stream_configs

- name: |
    Create configuration files in modules-available (only for nginx official
    repo or custom modules, Centos/RHEL/Debian/Ubuntu EPEL/APT repo packages
    have these config files already)
  become: yes
  template:
    src: module.conf.j2
    dest: "{{ nginx_conf_dir }}/modules-available/{{ item }}.conf"
  with_items: "{{ nginx_module_configs }}"
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx
  when:
    - (item not in nginx_remove_modules) and (item not in nginx_disabled_modules)
    - nginx_official_repo

- name: Create links in modules-available to Centos/RHEL EPEL provided configuration files. Debian/Ubuntu APT provided packages already have these config files.
  become: yes
  file:
    state: link
    src: "/usr/share/nginx/modules/{{ item }}.conf"
    dest: "{{ nginx_conf_dir }}/modules-available/{{ item }}.conf"
  with_items: "{{ nginx_module_configs }}"
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx
  when:
    - (item not in nginx_remove_modules) and (item not in nginx_disabled_modules)
    - ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
    - not nginx_official_repo

- name: Create links in our modules-available to Debian/Ubuntu APT provided config files.
  become: yes
  file:
    state: link
    src: "/usr/share/nginx/modules-available/{{ item }}.conf"
    dest: "{{ nginx_conf_dir }}/modules-available/{{ item }}.conf"
  with_items: "{{ nginx_module_configs }}"
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx
  when:
    - (item not in nginx_remove_modules) and (item not in nginx_disabled_modules)
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - not nginx_official_repo

- name: Move out of the way any existing "50-" style links in modules-available, only for Debian/Ubuntu APT provided packages
  become: yes
  command: "mv {{ nginx_conf_dir }}/modules-enabled/50-{{ item }}.conf {{ nginx_conf_dir }}/modules-enabled/50-{{ item }}.conf.renamedasnowmanaged"
  args:
    removes: "{{ nginx_conf_dir }}/modules-enabled/50-{{ item }}.conf"
  with_items: "{{ nginx_module_configs }}"
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx
  when:
    - (item not in nginx_remove_modules) and (item not in nginx_disabled_modules)
    - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - not nginx_official_repo

- name: Create links in modules-enabled from modules-available
  become: yes
  file:
    state: link
    src: "{{ nginx_conf_dir }}/modules-available/{{ item }}.conf"
    dest: "{{ nginx_conf_dir }}/modules-enabled/{{ item }}.conf"
  with_items: "{{ nginx_module_configs }}"
  when: (item not in nginx_remove_modules) and (item not in nginx_disabled_modules)
  ignore_errors: "{{ ansible_check_mode }}"
  notify:
    - reload nginx
